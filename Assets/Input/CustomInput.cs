//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""MapControl"",
            ""id"": ""9e9bc403-fc3a-4ffa-ae2b-35e838ad52ce"",
            ""actions"": [
                {
                    ""name"": ""CameraCloseIn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""12aa6433-fb9f-4424-9feb-e3c6d3208725"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMovementAWSD"",
                    ""type"": ""Value"",
                    ""id"": ""4848d8fd-ab54-4231-82d9-809264eafa87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3933a93d-31f5-40fe-8045-4d4b385ba21a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraCloseIn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9345d55e-e414-4e9c-bb40-5e180db1f37a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementAWSD"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a1c0e049-24ad-48a5-8287-72b418d708a0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementAWSD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f7cbacaa-2dcd-4274-a26e-c349e33b53a7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementAWSD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fdd69ff5-5d2a-46d3-becc-df0310db79d5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementAWSD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6e50e2e1-df48-4a93-bc53-9b7b6f5c777d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovementAWSD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MapControl
        m_MapControl = asset.FindActionMap("MapControl", throwIfNotFound: true);
        m_MapControl_CameraCloseIn = m_MapControl.FindAction("CameraCloseIn", throwIfNotFound: true);
        m_MapControl_CameraMovementAWSD = m_MapControl.FindAction("CameraMovementAWSD", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapControl
    private readonly InputActionMap m_MapControl;
    private List<IMapControlActions> m_MapControlActionsCallbackInterfaces = new List<IMapControlActions>();
    private readonly InputAction m_MapControl_CameraCloseIn;
    private readonly InputAction m_MapControl_CameraMovementAWSD;
    public struct MapControlActions
    {
        private @CustomInput m_Wrapper;
        public MapControlActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraCloseIn => m_Wrapper.m_MapControl_CameraCloseIn;
        public InputAction @CameraMovementAWSD => m_Wrapper.m_MapControl_CameraMovementAWSD;
        public InputActionMap Get() { return m_Wrapper.m_MapControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapControlActions set) { return set.Get(); }
        public void AddCallbacks(IMapControlActions instance)
        {
            if (instance == null || m_Wrapper.m_MapControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapControlActionsCallbackInterfaces.Add(instance);
            @CameraCloseIn.started += instance.OnCameraCloseIn;
            @CameraCloseIn.performed += instance.OnCameraCloseIn;
            @CameraCloseIn.canceled += instance.OnCameraCloseIn;
            @CameraMovementAWSD.started += instance.OnCameraMovementAWSD;
            @CameraMovementAWSD.performed += instance.OnCameraMovementAWSD;
            @CameraMovementAWSD.canceled += instance.OnCameraMovementAWSD;
        }

        private void UnregisterCallbacks(IMapControlActions instance)
        {
            @CameraCloseIn.started -= instance.OnCameraCloseIn;
            @CameraCloseIn.performed -= instance.OnCameraCloseIn;
            @CameraCloseIn.canceled -= instance.OnCameraCloseIn;
            @CameraMovementAWSD.started -= instance.OnCameraMovementAWSD;
            @CameraMovementAWSD.performed -= instance.OnCameraMovementAWSD;
            @CameraMovementAWSD.canceled -= instance.OnCameraMovementAWSD;
        }

        public void RemoveCallbacks(IMapControlActions instance)
        {
            if (m_Wrapper.m_MapControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapControlActions instance)
        {
            foreach (var item in m_Wrapper.m_MapControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapControlActions @MapControl => new MapControlActions(this);
    public interface IMapControlActions
    {
        void OnCameraCloseIn(InputAction.CallbackContext context);
        void OnCameraMovementAWSD(InputAction.CallbackContext context);
    }
}
